{"version":3,"sources":["chordCard.js","App.js","serviceWorker.js","index.js"],"names":["ChordCard","props","className","chordName","array","reverse","map","e","synth","Tone","toMaster","transposeNoteFromKey","number","keyNote","transpose","toNote","bpm","value","scale","scaleNotes","makeHarmony","start","harmonize","isDiatonic","slice","filter","includes","length","App","state","isPlay","score","Array","pushToScore","bind","handleLoop","loop","this","setState","sound","shift","triggerAttackRelease","setInterval","console","log","soundFromStack","onClick","note","harmony","harmony2iv","majorHarmony2iv","harmony3iv","majorHarmony3iv","harmony7th","major7Harmony","harmony9th","major9Harmony","minorHarmony2iv","minorHarmony3iv","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.386a7fcf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst ChordCard = (props) => (\n    <div className='chordcard'>\n        <h3 className=\"chordname\">{props.chordName}</h3>\n        {props.array.reverse().map((e) => (\n            <div className=\"notes\">{e}</div>\n        ))}\n    </div>\n)\n\nexport default ChordCard","import React from 'react';\nimport './App.css';\nimport * as Tone from 'tone'\nimport ChordCard from './chordCard'\n\nconst synth = new Tone.PolySynth().toMaster()\n\nconst makeSomeNoise = (note) => synth.triggerAttackRelease(note,\"4n\")\nconst makeSomeChord = (array) => synth.triggerAttackRelease(array,\"2n\")\n\nconst transposeNoteFromC4 = (number) => Tone.Frequency(\"C3\").transpose(number).toNote()\nconst transposeNoteFromKey = (number, keyNote) => Tone.Frequency(keyNote).transpose(number).toNote()\nlet keyNote = \"C3\"\nconst defaultBpm = 144\nTone.Transport.bpm.value = defaultBpm\n\nconst score = []\n\nconst scale = [0,2,4,5,7,9,11] // length 7\nconst scaleNotes = scale.map((e) => transposeNoteFromKey(e, \"C3\"))\nconst scaleNotesFromKey = (keyNote) = scale.map((e) => transposeNoteFromKey(e, keyNote))\n\n\n// 和音をつくる\nconst makeHarmony = (start,array) => Tone.Frequency(start).harmonize(array).map(e => e.toNote())\n// いろんな和音をつくる\nconst majorHarmony = (start) => makeHarmony(start,[-12,0,4,7])\nconst majorHarmony2iv = (start) => makeHarmony(start,[-12,4,7,12])\nconst majorHarmony3iv = (start) => makeHarmony(start,[-12,7, 12, 16])\n\nconst major7Harmony = (start) => makeHarmony(start,[-12,0,4,7,11])\nconst major9Harmony = (start) => makeHarmony(start,[-12,0,4,9,14])\n\nconst minorHarmony = (start) => makeHarmony(start,[-12,0, 3, 7])\nconst minorHarmony2iv = (start) => makeHarmony(start,[-12,3, 7, 12])\nconst minorHarmony3iv = (start) => makeHarmony(start,[-12,7, 12, 15])\n\n// ダイアトニックかしらべる\nconst isDiatonic = (array) => {\n  const scale = scaleNotes.map((e) => e.slice(0,-1)) // 最後の数字を取る（オクターブ違い対策）\n  const strippedchord = array.map((e) => e.slice(0,-1)).filter((e) => (!scale.includes(e))) //スケールに含まれる音を取る\n  return strippedchord.length === 0\n}\n\nconst scoreVisible = (score) => score.map((e) => <ChordCard chordName={e.chordName} array={e.sound} />)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPlay: false,\n      score: new Array()};\n    this.pushToScore = this.pushToScore.bind(this);\n    this.handleLoop = this.handleLoop.bind(this);\n    this.loop()\n  }\n  handleLoop() {\n    this.setState({isPlay: !this.state.isPlay})\n  }\n  pushToScore(array, chordName) {\n    this.setState(\n      {score: [...this.state.score, {chordName:chordName, sound: array}]}\n      )\n    }\n  soundFromStack(){\n    if (this.state.score.length !== 0) {\n      let score = this.state.score\n      makeSomeChord(score.shift().sound)\n      this.setState(\n        {score: score}\n      )\n    }\n  }\n  loop(){\n    setInterval(() => {\n    if (!this.state.isPlay) return\n    console.log('beats!')\n    this.soundFromStack()\n    }, 2 / defaultBpm * 60 * 1000)\n  }\n  render() {\n  return (\n    <>\n    <button\n    onClick={() => this.handleLoop()}\n    >{this.state.isPlay ? 'stop' : 'start' }</button>\n    <h2>score</h2>\n    <div className=\"flex scoreboard\">\n      {scoreVisible(this.state.score)}\n    </div>\n    <h2>note</h2>\n    {scaleNotes.map((e) => {\n      return <button onClick={() => makeSomeNoise(e)} >{e}</button>})}\n    <h2>major chord</h2>\n      {scaleNotes.map((e) => {\n      const harmony = majorHarmony(e)\n      const harmony2iv = majorHarmony2iv(e)\n      const harmony3iv = majorHarmony3iv(e)\n      const harmony7th = major7Harmony(e)\n      const harmony9th = major9Harmony(e)\n      return <div>\n      <button className={isDiatonic(harmony) ? 'diatonic' : '' } onClick={() => this.pushToScore(harmony, e.slice(0,1))} >{e.slice(0,1)}</button>\n      <button className={isDiatonic(harmony) ? 'diatonic' : '' } onClick={() => this.pushToScore(harmony2iv, e.slice(0,1))} >{e.slice(0,1)}.2iv</button>\n      <button className={isDiatonic(harmony) ? 'diatonic' : '' } onClick={() => this.pushToScore(harmony3iv, e.slice(0,1))} >{e.slice(0,1)}.3iv</button>\n      <button className={isDiatonic(harmony) ? 'diatonic' : '' } onClick={() => this.pushToScore(harmony7th, e.slice(0,1)+\"7\")} >{e.slice(0,1)}7</button>\n      <button className={isDiatonic(harmony) ? 'diatonic' : '' } onClick={() => this.pushToScore(harmony9th, e.slice(0,1)+\"9\")} >{e.slice(0,1)}9</button>\n      </div>\n      })}\n    <h2>minor chord</h2>\n      {scaleNotes.map((e) => {\n      const harmony = minorHarmony(e)\n      const harmony2iv = minorHarmony2iv(e)\n      const harmony3iv = minorHarmony3iv(e)\n      return <div>\n      <button className={isDiatonic(harmony) ? 'diatonic' : '' } onClick={() => this.pushToScore(harmony, e.slice(0,1)+\"m\")} >{e.slice(0,1)}m</button>\n      <button className={isDiatonic(harmony) ? 'diatonic' : '' } onClick={() => this.pushToScore(harmony2iv, e.slice(0,1)+\"m\")} >{e.slice(0,1)}m.2iv</button>\n      <button className={isDiatonic(harmony) ? 'diatonic' : '' } onClick={() => this.pushToScore(harmony3iv, e.slice(0,1)+\"m\")} >{e.slice(0,1)}m.3iv</button>\n      </div>\n      })}\n    </>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}