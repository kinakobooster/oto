{"version":3,"sources":["chordCard.js","App.js","serviceWorker.js","index.js"],"names":["ChordCard","props","className","dead","chordName","array","concat","reverse","map","e","synth","Tone","toMaster","transposeNoteFromC4","number","transpose","toNote","transposeNoteFromKey","keyNote","bpm","value","scale","scaleNotes","CHORDSEED","octave","_","_M7","_7","_add9","m","mM7","m7","nearestRoot","beforeRoot","chordRootNum","arr","diffarr","Math","abs","indexOf","min","apply","allInverseOctaveArr","chordSeed","basicChord","push","i","length","newChord","slice","upperOctave","note","lowerOctave","makeMinMaxArray","numArray","max","getArraysIntersectCount","array01","array02","filter","includes","isDiatonic","App","state","isPlay","score","played","pushToScore","bind","handleLoop","loop","this","setState","notesArr","noteNumArr","sound","noteNum","play","shift","triggerAttackRelease","setInterval","console","log","soundFromStack","onClick","chords","Object","keys","key","n","makeChord","chord","nextChord","beforeChordArr","onChord","notesNum","notes","sort","a","b","rootNote","kouho","beforeRange","kouhoScores","winner","noteNums","nearestChord","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.516d416b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst ChordCard = (props) => (\n  <div className={`chordcard${props.dead ? \" dead\" : \"\"}`}>\n    <h3 className=\"chordname\">{props.chordName}</h3>\n    {props.array\n      .concat()\n      .reverse()\n      .map((e) => (\n        <div className=\"notes\">{e}</div>\n      ))}\n  </div>\n);\n\nexport default ChordCard;\n","import React from \"react\";\nimport \"./App.css\";\nimport * as Tone from \"tone\";\nimport ChordCard from \"./chordCard\";\n\nconst synth = new Tone.PolySynth().toMaster();\n\nconst makeSomeNoise = (note) => synth.triggerAttackRelease(note, \"4n\");\nconst makeSomeChord = (array) => synth.triggerAttackRelease(array, \"2n\");\n\nconst transposeNoteFromC4 = (number) =>\n  Tone.Frequency(\"C3\").transpose(number).toNote();\nconst transposeNoteFromKey = (number, keyNote) =>\n  Tone.Frequency(keyNote).transpose(number).toNote();\n\nlet keyNote = \"C3\";\nconst defaultBpm = 144;\nTone.Transport.bpm.value = defaultBpm;\n\nconst scale = [0, 2, 4, 5, 7, 9, 11]; // length 7\nconst scaleNotes = scale.map((e) => transposeNoteFromKey(e, \"C3\"));\nconst scaleNotesFromKey = (keyNote = scale.map((e) =>\n  transposeNoteFromKey(e, keyNote)\n));\nconst OCTAVE = 12;\nconst CHORDSEED = {\n  octave: [-12, 0, 12],\n  _: [0, 4, 7],\n  _M7: [0, 4, 7, 11],\n  _7: [0, 4, 7, 10],\n  _add9: [0, 4, 7, 14],\n  m: [0, 3, 7],\n  mM7: [0, 3, 7, 11],\n  m7: [0, 3, 7, 10],\n};\n\nconst makeChord = (note) => {\n  let chords = [];\n  for (let key of Object.keys(CHORDSEED)) {\n    chords.push({\n      chordRootNum: note,\n      chordSeed: CHORDSEED[key].map((n) => n + note),\n      chordName: transposeNoteFromC4(note).slice(0, 1) + key,\n    });\n  }\n  return chords;\n};\n\nconst scaleNum = (scaleKeyNum, scaleseedNumArray) => {\n  scaleseedNumArray.map((e) => ({\n    note: transposeNoteFromC4(scaleKeyNum + e),\n    number: scaleKeyNum + e,\n  }));\n};\n\n// 勝手に近めの和音を選んであげる\n// 前の和音とルートをもらう 数字でもらう\n// 近い方のルートに行く\nconst nearestChord = ({\n  beforeChordArr = [],\n  chordRootNum,\n  chordSeed,\n  chordName,\n  onChord = false,\n}) => {\n  // 前に何もなかったら普通に転回してないやつを鳴らす\n  if (beforeChordArr.length === 0) {\n    const noteNum = [chordRootNum - OCTAVE, ...chordSeed];\n    return {\n      chordName: chordName,\n      notesNum: noteNum,\n      notes: noteNum.map((e) => transposeNoteFromC4(e)),\n    };\n  }\n  beforeChordArr.sort((a, b) => a - b); // 小さい順にソート\n  // ルート音は別で考える\n  const beforeRoot = beforeChordArr.slice(0, 1); // 一番低い音\n  const rootNote = nearestRoot(beforeRoot, chordRootNum);\n  // ルート以外の音の構成を作る\n  // 転回形とオクターブ上下で、3和音だったら3*3の9候補を作る\n  const kouho = allInverseOctaveArr(chordRootNum, chordSeed);\n  // 前のコードとの被り範囲を調べる\n  const beforeRange = makeMinMaxArray(beforeChordArr.slice(1));\n  const kouhoScores = kouho.map((e) =>\n    getArraysIntersectCount(beforeRange, makeMinMaxArray(e))\n  );\n  const index = kouhoScores.indexOf(Math.max.apply(null, kouhoScores));\n  const winner = kouho[index];\n  const noteNums = [rootNote, ...winner].sort((a, b) => a - b);\n  return {\n    chordName: chordName,\n    notesNum: noteNums,\n    notes: noteNums.map((e) => transposeNoteFromC4(e)),\n  };\n};\n\nconst nearestRoot = (beforeRoot, chordRootNum) => {\n  const arr = CHORDSEED.octave.map((e) => e + chordRootNum - OCTAVE); // -3, -2, -1 オクターブから探す\n  const diffarr = arr.map((e) => Math.abs(e - beforeRoot));\n  const index = diffarr.indexOf(Math.min.apply(null, diffarr));\n  const noteNum = arr[index];\n  return noteNum;\n};\n\n// 前の音の範囲といっぱい被ってる転回形を選ぶ\n\n// 転回してないやつ seed =　[0 4 7 9], seed.map((e) => (e + 12)) , seed.map((e) => (e - 12))　の3つ\n// 第一転回してるやつ seed の頭の1個だけ 12を足して、オクターブ違いも同様にアレする\n// seed.length - 1 の長さ×3パターンできてくる\nconst allInverseOctaveArr = (chordRootNum, chordSeed) => {\n  let arr = [];\n  const basicChord = chordSeed;\n  arr.push(basicChord);\n  // 転回形をつくる\n  for (let i = 1; i < chordSeed.length; i++) {\n    const newChord = [\n      ...basicChord.slice(0, i).map((e) => e + OCTAVE),\n      ...basicChord.slice(i),\n    ];\n    arr.push(newChord);\n  }\n  // オクターブ上とオクターブ下を作る\n  const upperOctave = arr.map((e) => e.map((note) => note + OCTAVE));\n  const lowerOctave = arr.map((e) => e.map((note) => note - OCTAVE));\n  arr.push(...upperOctave);\n  arr.push(...lowerOctave);\n  return arr;\n};\n\n// できた和音同士の被りスコアを計算する\n// max と min だけ使う\nconst makeMinMaxArray = (numArray) => {\n  const min = Math.min(...numArray);\n  const max = Math.max(...numArray);\n  let arr = [];\n  for (let i = min; i <= max; ++i) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n// 被ってる部分をスコアにする\nconst getArraysIntersectCount = (array01, array02) => {\n  return array01.filter((value) => array02.includes(value)).length;\n};\n\n// 和音をつくる\nconst makeHarmony = (start, array) =>\n  Tone.Frequency(start)\n    .harmonize(array)\n    .map((e) => e.toNote());\n\n// ダイアトニックかしらべる\nconst isDiatonic = (array) => {\n  const scale = scaleNotes.map((e) => e.slice(0, -1)); // 最後の数字を取る（オクターブ違い対策）\n  const strippedchord = array\n    .map((e) => e.slice(0, -1))\n    .filter((e) => !scale.includes(e)); //スケールに含まれる音を取る\n  return strippedchord.length === 0;\n};\n\nconst scoreVisible = (score, played) => {\n  return (\n    <>\n      {played.map((e) => (\n        <ChordCard dead={true} chordName={e.chordName} array={e.sound} />\n      ))}\n      {score.map((e) => (\n        <ChordCard chordName={e.chordName} array={e.sound} />\n      ))}\n    </>\n  );\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPlay: false,\n      score: [],\n      played: [],\n    };\n    this.pushToScore = this.pushToScore.bind(this);\n    this.handleLoop = this.handleLoop.bind(this);\n    this.loop();\n  }\n  handleLoop() {\n    const synth = new Tone.PolySynth().toMaster();\n    this.setState({ isPlay: !this.state.isPlay });\n    if (this.state.isPlay && this.state.score.length === 0) {\n      this.setState({\n        score: this.state.played,\n        played: [],\n      });\n    }\n  }\n  pushToScore(notesArr, noteNumArr, chordName) {\n    this.setState({\n      score: [\n        ...this.state.score,\n        { sound: notesArr, noteNum: noteNumArr, chordName: chordName },\n      ],\n    });\n  }\n  soundFromStack() {\n    if (this.state.score.length !== 0) {\n      let score = this.state.score;\n      const play = score.shift();\n      makeSomeChord(play.sound);\n      let played = this.state.played;\n      played.push(play);\n      this.setState({ score: score, played: played });\n    }\n  }\n  loop() {\n    setInterval(() => {\n      if (!this.state.isPlay) return;\n      console.log(\"beats!\");\n      this.soundFromStack();\n    }, (2 / defaultBpm) * 60 * 1000);\n  }\n  render() {\n    return (\n      <>\n        <h1>コード</h1>\n        <h2>再生・停止</h2>\n        <button onClick={() => this.handleLoop()}>\n          {this.state.isPlay ? \"stop\" : \"start\"}\n        </button>\n        <h2>score</h2>\n        <div className=\"yoko scoreboard\">\n          {scoreVisible(this.state.score, this.state.played)}\n        </div>\n        <h2>note</h2>\n        {scaleNotes.map((e) => {\n          return <button onClick={() => makeSomeNoise(e)}>{e}</button>;\n        })}\n        <h2>勝手に近い転回形をえらびます</h2>\n        {scale.map((note) => {\n          const chords = makeChord(note);\n          return (\n            <div>\n              {chords.map((chord) => {\n                const nextChord = nearestChord({\n                  beforeChordArr:\n                    this.state.score.length === 0\n                      ? []\n                      : this.state.score.slice(-1)[0].noteNum,\n                  chordRootNum: chord.chordRootNum,\n                  chordSeed: chord.chordSeed,\n                  chordName: chord.chordName,\n                });\n                return (\n                  <button\n                    className={\n                      isDiatonic(\n                        chord.chordSeed.map((e) => transposeNoteFromC4(e))\n                      )\n                        ? \"diatonic\"\n                        : \"\"\n                    }\n                    onClick={() =>\n                      this.pushToScore(\n                        nextChord.notes,\n                        nextChord.notesNum,\n                        nextChord.chordName\n                      )\n                    }\n                  >\n                    {nextChord.chordName}\n                  </button>\n                );\n              })}\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}